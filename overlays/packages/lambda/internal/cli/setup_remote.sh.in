#!/usr/bin/env bash
set -euo pipefail

ERROR_COLOR="\033[0;31m" # Red
LOG_COLOR="\033[0;32m"   # Green
WARN_COLOR="\033[0;34m"  # Blue
DEBUG_COLOR="\033[0;35m" # Purple
RESET_COLOR="\033[0m"

log() {
	local level=$1
	local caller=$2
	local message=$3

	# Convert caller to uppercase
	caller=$(echo "$caller" | tr '[:lower:]' '[:upper:]')

	# Set color based on log level
	local color=""
	case $level in
	"ERROR")
		color=$ERROR_COLOR
		;;
	"INFO")
		color=$LOG_COLOR
		;;
	"WARN" | "WARNING")
		color=$WARN_COLOR
		;;
	"DEBUG")
		color=$DEBUG_COLOR
		;;
	*)
		color=$RESET_COLOR
		;;
	esac

	# Print formatted log message
	echo -e "${color}[${caller}]${RESET_COLOR} ${message}"
}

log_info() {
	local message=$1
	log "INFO" "RMT" "$message"
}

log_warn() {
	local message=$1
	log "WARN" "RMT" "$message"
}

log_error() {
	local message=$1
	log "ERROR" "RMT" "$message"
}

log_debug() {
	local message=$1
	log "DEBUG" "RMT" "$message"
}

log_info "Starting Remote Setup"

if [[ -f ~/.lambda-setup-once ]]; then
	log_warn "Setup has been ran once. Use 'lambda connect $INSTANCE_ID' instead."
	exit 0
fi

log_info "Setting up Nix, waiting for 5 seconds to make sure environment is loaded."
sleep 5
if ! command -v nix &>/dev/null && ! [[ -f /nix/receipt.json ]]; then
	curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux --no-confirm
	if [[ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]]; then
		. "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
	else
		log_warn "Could not find nix-daemon.sh to source. Nix commands might fail. Attempting to source common user profile"
		if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
			. "$HOME/.nix-profile/etc/profile.d/nix.sh"
		fi
	fi
	log_info "Nix installed."
else
	log_warn "Nix is already installed."
fi

{{ if .DixSetup }}

log_info "Running nix"
nix run home-manager -- switch --flake github:aarnphm/dix/main#ubuntu --show-trace -L --option accept-flake-config true
log_info "Changing password for {{ .RemoteUser }}"
# Note: passwd requires interaction or specific flags depending on the system.
# Using chpasswd is generally more script-friendly.
if echo "{{ .RemoteUser }}:{{ .RemotePassword }}" | sudo chpasswd; then
	log_info "Password changed successfully."
else
	log_warn "Failed to change password using chpasswd. Manual intervention might be required."
fi

# Source again after home-manager potentially changed profiles
# Source Nix environment for the current script
# This path might need adjustment depending on the exact installation details
if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
	. "$HOME/.nix-profile/etc/profile.d/nix.sh"
elif [[ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]]; then
	. "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
else
	log_warn "Could not find nix profile to source after HM switch."
fi

log_info "Authenticating GitHub CLI and setup workspace"

WORKSPACE_DIR="$HOME/workspace"
mkdir -p "$WORKSPACE_DIR"

REPOS=(
	"aarnphm/avante.nvim:neovim-plugins/avante.nvim"
	"aarnphm/surf.nvim:neovim-plugins/surf.nvim"
	"aarnphm/vllm:vllm"
	"bentoml/BentoVLLM:bentovllm"
	"bentoml/openllm-models:openllm-models"
)

pushd "$WORKSPACE_DIR" >/dev/null

if command -v gh &>/dev/null; then
	if ! gh auth status &>/dev/null; then
		log_info "Logging into GitHub CLI using token"
		(echo "{{ .GhToken }}" | gh auth login -p ssh --with-token) &>/dev/null || true
	else
		log_info "GitHub CLI already authenticated"
	fi

	for item in "${REPOS[@]}"; do
		IFS=":" read -r repo_path target_dir <<<"$item"
		target_full_path="$WORKSPACE_DIR/$target_dir"
		if [[ -d "$target_full_path" ]]; then
			log_info "Directory $target_full_path already exists, skipping clone."
		else
			mkdir -p "$(dirname "$target_full_path")"
			log_info "Cloning $repo_path into $target_full_path..."
			gh repo clone "$repo_path" "$target_full_path"
		fi
	done

	log_info "Cloning Neovim config..."
	if [[ -d "$HOME/.config/nvim" ]]; then
		log_info "~/.config/nvim already exists, skipping clone."
	else
		gh repo clone aarnphm/editor "$HOME/.config/nvim"
	fi
fi

popd >/dev/null

mkdir -p $HOME/.local/share/bentoml/ && mv ~/.yatai.yaml $HOME/.local/share/bentoml/.yatai.yaml

log_info "Import default GPG keys for remote machine"
echo '{{ .RemoteGpgPassphrase }}' >/tmp/gpg_passphrase
cat /tmp/gpg_passphrase | gpg --batch --passphrase-fd 0 --pinentry-mode loopback --import ~/gpg-private-lambdalabs.key
rm /tmp/gpg_passphrase && rm ~/gpg-private-lambdalabs.key
gpgconf --kill all

log_info "Changing shell for {{ .RemoteUser }}"
echo "{{ .RemotePassword }}" | sudo chsh -s /usr/bin/zsh {{ .RemoteUser }}

nvim --headless "+Lazy! sync" +qa
nvim --headless -c 'lua require("nvim-treesitter.install").update({ with_sync = true }); vim.cmd("quitall")'

{{ end }}

touch ~/.lambda-setup-once

log_info "Remote Setup Finished"
exit 0
