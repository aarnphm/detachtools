#!/usr/bin/env bash
set -euo pipefail

ERROR_COLOR="\033[0;31m" # Red
LOG_COLOR="\033[0;32m"   # Green
WARN_COLOR="\033[0;34m"  # Blue
DEBUG_COLOR="\033[0;35m" # Purple
RESET_COLOR="\033[0m"

log() {
	local level=$1
	local caller=$2
	local message=$3

	# Convert caller to uppercase
	caller=$(echo "$caller" | tr '[:lower:]' '[:upper:]')

	# Set color based on log level
	local color=""
	case $level in
	"ERROR")
		color=$ERROR_COLOR
		;;
	"INFO")
		color=$LOG_COLOR
		;;
	"WARN" | "WARNING")
		color=$WARN_COLOR
		;;
	"DEBUG")
		color=$DEBUG_COLOR
		;;
	*)
		color=$RESET_COLOR
		;;
	esac

	# Print formatted log message
	echo -e "${color}[${caller}]${RESET_COLOR} ${message}"
}

log_info() {
	local message=$1
	log "INFO" "RMT" "$message"
}

log_warn() {
	local message=$1
	log "WARN" "RMT" "$message"
}

log_error() {
	local message=$1
	log "ERROR" "RMT" "$message"
}

log_debug() {
	local message=$1
	log "DEBUG" "RMT" "$message"
}

log_info "init"

{{ if not .ForceSetup }}
if [[ -f ~/.lambda-setup-once ]]; then
	log_warn "use 'lm connect $INSTANCE_ID' or the --force flag instead."
	exit 0
fi
{{ else }}
log_warn "proceeding with setup (force=true)"
{{ end }}

log_info "sleep for 5 seconds to make sure environment is loaded before sourcing nix."
sleep 5
if ! command -v nix &>/dev/null && ! [[ -f /nix/receipt.json ]]; then
	curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux --no-confirm
	if [[ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]]; then
		. "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
	else
		log_warn "could not find nix-daemon.sh. nix commands might fail. attempting to source common user profile"
		if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
			. "$HOME/.nix-profile/etc/profile.d/nix.sh"
		fi
	fi
	log_info "nix installed."
else
	log_warn "nix is already installed."
fi

{{ if .DetachSetup }}

log_info "setup detachtools"
nix run github:aarnphm/detachtools/main#bootstrap -- linux {{ .NixUser }}
log_info "Update default password for {{ .RemoteUser }}"
# Note: passwd requires interaction or specific flags depending on the system.
# Using chpasswd is generally more script-friendly.
if echo "{{ .RemoteUser }}:{{ .RemotePassword }}" | sudo chpasswd; then
	log_info "password changed successfully."
else
	log_warn "failed to change password. manual intervention might be required."
fi

# Source again after home-manager potentially changed profiles
# Source Nix environment for the current script
# This path might need adjustment depending on the exact installation details
if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
	. "$HOME/.nix-profile/etc/profile.d/nix.sh"
elif [[ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]]; then
	. "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
else
	log_warn "could not find nix profile to source after home-manager switch"
fi

WORKSPACE_DIR="$HOME/workspace"
LLM_D_META="$WORKSPACE_DIR/llm-d-meta"
mkdir -p "$WORKSPACE_DIR"
mkdir -p "$LLM_D_META"

REPOS=(
	"aarnphm/avante.nvim:neovim-plugins/avante.nvim:feat/flake"
	"aarnphm/surf.nvim:neovim-plugins/surf.nvim"
	"aarnphm/luasnip-latex-snippets.nvim:neovim-plugins/luasnip-latex-snippets.nvim"
	"aarnphm/vllm:vllm-meta/vllm"
	"vllm-project/vllm:vllm-meta/upstream"
	"vllm-project/production-stack:vllm-meta/production-stack"
	"aarnphm/EAGLE:vllm-meta/EAGLE"
	"sgl-project/sglang:sglang"
	"aarnphm/detachtools:detachtools"
	"bentoml/BentoML:bentoml-meta/bentoml"
	"bentoml/BentoVLLM:bentovllm"
	"bentoml/BentoSGLang:bentosglang"
	"bentoml/BentoLMDeploy:bentolmdeploy"
	"bentoml/bentocloud-homepage-news:bentovllm/bentocloud-homepage-news"
	"bentoml/openllm-models:bentml-meta/openllm-models"
	"bentoml/revia-codes:bentml-meta/revia-codes"
	"bentoml/OrangeBentos:bentml-meta/orangebentos"
	"llm-d/llm-d:llm-d-meta/llm-d"
	"llm-d/llm-d-deployer:llm-d-meta/llm-d-deployer"
	"llm-d/llm-d-inference-scheduler:llm-d-meta/llm-d-inference-scheduler"
	"llm-d/llm-d-kv-cache-manager:llm-d-meta/llm-d-kv-cache-manager"
	"llm-d/llm-d-routing-sidecar:llm-d-meta/llm-d-routing-sidecar"
	"llm-d/llm-d-model-service:llm-d-meta/llm-d-model-service"
	"llm-d/llm-d-benchmark:llm-d-meta/llm-d-benchmark"
	"llm-d/llm-d-inference-sim:llm-d-meta/llm-d-inference-sim"
)

pushd "$WORKSPACE_DIR" >/dev/null

if command -v gh &>/dev/null; then
	if ! gh auth status &>/dev/null; then
		log_info "setup gh CLI"
		(echo "{{ .GhToken }}" | gh auth login -p ssh --with-token) || true
	else
		log_warn "gh already authenticated"
	fi

	for item in "${REPOS[@]}"; do
		IFS=":" read -r repo_path target_dir target_branch <<<"$item"

		target_full_path="$WORKSPACE_DIR/$target_dir"

		if [[ -d "$target_full_path" ]]; then
			log_warn "directory $target_full_path already exists."
		else
			mkdir -p "$(dirname "$target_full_path")"
			log_info "cloning $repo_path into $target_full_path..."

			clone_args=()
			if [[ -n "$target_branch" ]]; then
				clone_args=("--branch" "$target_branch")
				log_info "using branch: $target_branch"
			fi

			gh repo clone "$repo_path" "$target_full_path" -- "${clone_args[@]}"
		fi
	done

	log_info "setup neovim config"
	if [[ -d "$HOME/.config/nvim" ]]; then
		log_info "~/.config/nvim already exists, skipping clone."
	else
		gh repo clone aarnphm/editor "$HOME/.config/nvim"
	fi
fi

popd >/dev/null

mkdir -p $HOME/.local/share/bentoml/ && mv ~/.yatai.yaml $HOME/.local/share/bentoml/.yatai.yaml

log_info "setup remote gpg key"
echo '{{ .RemoteGpgPassphrase }}' >/tmp/gpg_passphrase
cat /tmp/gpg_passphrase | gpg --batch --passphrase-fd 0 --pinentry-mode loopback --import ~/gpg-private-lambdalabs.key
rm /tmp/gpg_passphrase && rm ~/gpg-private-lambdalabs.key
gpgconf --kill all

sudo apt-get install -y libssl-dev pkg-config

log_info "setup editor and rust toolchain"
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile complete --no-modify-path --default-toolchain nightly -y
. "$HOME/.cargo/env"
rustup toolchain install nightly

{{ if .EngineSetup }}

log_info "setup vllm"

pushd $WORKSPACE_DIR/vllm &>/dev/null
uv venv .venv -p 3.11 --seed
source .venv/bin/activate
uv pip install pre-commit
VLLM_USE_PRECOMPILED=True uv pip install -e . -v
pre-commit install
deactivate
popd &>/dev/null

pushd $WORKSPACE_DIR/sglang &>/dev/null
uv venv .venv -p 3.11 --seed
source .venv/bin/activate
uv pip install --compile-bytecode -e "python[all]" -v
uv pip install --compile-bytecode -e sgl-router -v
uv pip install --compile-bytecode -e sgl-pdlb -v
uv pip install --compile-bytecode sgl-kernel -i https://docs.sglang.ai/whl/cu118 -v
deactivate
popd &>/dev/null

{{ end }}

nvim --headless "+Lazy! sync" +qa
nvim --headless -c 'lua require("nvim-treesitter.install").update({ with_sync = true }); vim.cmd("quitall")'

log_info "setup atuin and install relevant tools"
atuin account login -u aarnphm -p '{{ .RemoteGpgPassphrase }}' -k "$(cat ~/atuin.key)"
atuin sync

log_info "update default shell to zsh for {{ .RemoteUser }}"
echo "{{ .RemotePassword }}" | sudo chsh -s /usr/bin/zsh {{ .RemoteUser }}

{{ end }}

touch ~/.lambda-setup-once

log_info "finished."
exit 0
